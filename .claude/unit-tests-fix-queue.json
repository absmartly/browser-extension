{
  "queueVersion": "2.0",
  "created": "2025-10-28",
  "campaign": "Fix Failing Unit Tests",
  "phase": "Unit Test Remediation - Fix 7 failing tests across 4 test suites",
  "totalTasks": 7,
  "executionStrategy": "Parallel execution: Agents 1-3 fix type system and validation issues, Agents 4-7 fix logic issues and verify in parallel after Wave 1",
  "critical": true,
  "criticalReason": "7 failing tests block release. 3 tests can't run at all due to type errors. 4 tests fail on assertions due to missing validation and incorrect test setup.",
  "instructions": "Each agent picks ONE task from their assigned group. Wave 1 agents (1-3) fix blocking type errors and add validation. Wave 2 agents (4-7) fix logic issues and verify all tests pass. All agents report git status when done.",
  "tasks": [
    {
      "id": "unit-fix-1a",
      "wave": "Wave 1 - Fix Type System Errors",
      "file": "src/lib/messaging.ts and src/lib/__tests__/messaging.test.ts",
      "priority": "P0",
      "type": "Type System Fix",
      "status": "pending",
      "assignedTo": "Agent-1",
      "knownIssue": "messaging.test.ts fails to compile - Module has no exported member 'ExtensionMessage', 'sendMessage', 'setupMessageResponseHandler'",
      "description": "Fix missing type and function exports in messaging module. The messaging.ts module was refactored but didn't export ExtensionMessage type or key functions that tests expect.",
      "estimatedMinutes": 20,
      "rootCauseAnalysis": "messaging.ts was refactored without updating exports. Tests reference ExtensionMessage type and sendMessage/setupMessageResponseHandler functions that are no longer exported.",
      "fixStrategy": "Read messaging.ts to see current API. Either: (1) Export the missing types/functions if they still exist in the file, OR (2) Update test imports to match new API, OR (3) Implement the missing exports if they were deleted. Then verify test compiles.",
      "checklist": [
        "Read src/lib/messaging.ts to see current exports and structure",
        "Read src/lib/__tests__/messaging.test.ts line 1 to see what ExtensionMessage type is expected",
        "Read src/lib/__tests__/messaging.test.ts lines 32-33 to see what functions are expected",
        "Determine: do these types/functions exist but aren't exported, or were they deleted?",
        "If not exported: add export statements to messaging.ts",
        "If deleted: update test imports to match current API",
        "Run: npm run test:unit -- messaging.test.ts",
        "Verify test compiles without TypeScript errors",
        "Run: npm run test:unit -- message-router.test.ts (should also fix this file's same error)",
        "Commit: 'fix: restore messaging module exports for tests'"
      ],
      "expectedOutcome": "messaging.test.ts and message-router.test.ts both compile and can run. Previously blocked tests will execute.",
      "reportingRequirements": "Document: (1) What was exported (types/functions), (2) Test compilation result, (3) Git status after commit, (4) If couldn't find missing exports, note what exists vs what's needed"
    },
    {
      "id": "unit-fix-1b",
      "wave": "Wave 1 - Fix Type System Errors",
      "file": "src/visual-editor/core/visual-editor.ts and src/visual-editor/core/__tests__/visual-editor.test.ts",
      "priority": "P0",
      "type": "Read-only Property Fix",
      "status": "pending",
      "assignedTo": "Agent-2",
      "knownIssue": "visual-editor.test.ts fails to compile - Cannot assign to 'isActive' because it is a read-only property (lines 271 and 790)",
      "description": "Fix read-only property issue in visual-editor tests. Tests try to directly mutate isActive property but it's read-only. Either make isActive settable or refactor tests to use public methods.",
      "estimatedMinutes": 25,
      "rootCauseAnalysis": "isActive property was changed to be read-only (likely readonly getter). Tests at lines 271 and 790 try to assign to it directly: editor['isActive'] = true",
      "fixStrategy": "Option A: Remove readonly modifier from isActive and allow tests to set it. Option B: Refactor tests to trigger isActive changes through public methods. Option C: Use test utilities or helpers to properly set isActive. Choose based on what makes sense architecturally.",
      "checklist": [
        "Read src/visual-editor/core/visual-editor.ts around the isActive property definition",
        "Read src/visual-editor/core/__tests__/visual-editor.test.ts lines 271 and 790 to understand what test needs",
        "Determine: Is isActive supposed to be read-only for good reason? Or was readonly added unintentionally?",
        "If readonly is intentional: refactor test to set isActive through public methods (like startVisualEditor() or similar)",
        "If readonly is unintentional: remove readonly modifier from property",
        "Update the problematic lines (271 and 790) in test file",
        "Run: npm run test:unit -- visual-editor.test.ts",
        "Verify compilation succeeds",
        "Commit: 'fix: resolve visual-editor isActive property mutation in tests'"
      ],
      "expectedOutcome": "visual-editor.test.ts compiles without TypeScript errors. Tests that were blocked by compilation can now run.",
      "reportingRequirements": "Document: (1) Property readonly status and why, (2) How fix was implemented, (3) Test compilation result, (4) Git status"
    },
    {
      "id": "unit-fix-1c",
      "wave": "Wave 1 - Add Missing Validation",
      "file": "src/visual-editor/preview/preview-manager.ts",
      "priority": "P0",
      "type": "Input Validation Addition",
      "status": "pending",
      "assignedTo": "Agent-3",
      "knownIssue": "PreviewManager.applyPreviewChange() doesn't validate javascript action changes properly. Tests expect false for: (1) javascript change missing 'value' property, (2) javascript change with non-string 'value'",
      "description": "Add input validation to PreviewManager.applyPreviewChange() method. Currently accepts invalid javascript action changes when 'value' is missing or non-string. Tests correctly expect these to fail validation.",
      "estimatedMinutes": 20,
      "rootCauseAnalysis": "PreviewManager.applyPreviewChange() processes javascript action type without validating that value exists and is a string. Tests at lines 255-257 and 268-270 expect false but get true.",
      "fixStrategy": "In applyPreviewChange() method, add validation for javascript action type: Check if change.action === 'javascript', then validate: (1) change.value exists, (2) change.value is a string. If either fails, return false. Otherwise continue with processing.",
      "checklist": [
        "Read src/visual-editor/preview/preview-manager.ts applyPreviewChange() method",
        "Locate where javascript action is handled",
        "Add validation check: if (action === 'javascript') { if (!value || typeof value !== 'string') return false }",
        "Alternatively examine existing validation pattern and follow same style",
        "Run: npm run test:unit -- preview-manager.test.ts",
        "Verify both tests pass: 'should return false for javascript with missing value' and 'should return false for javascript with non-string value'",
        "Commit: 'fix: add validation for javascript action in preview manager'"
      ],
      "expectedOutcome": "PreviewManager properly validates javascript action changes. Two failing tests will pass.",
      "reportingRequirements": "Document: (1) Exact validation code added, (2) Test results (should pass both tests), (3) Git status after commit"
    },
    {
      "id": "unit-fix-verify-1",
      "wave": "Wave 2 - Fix Logic Issues",
      "file": "src/components/__tests__/EventsDebugPage.test.tsx",
      "priority": "P1",
      "type": "Event Handler Fix",
      "status": "pending",
      "assignedTo": "Agent-4",
      "knownIssue": "Three EventsDebugPage tests fail because mockTabsSendMessage is never called when event is clicked. Tests: (1) opens event viewer when event is clicked, (2) sends correct data for event with null data, (3) opens event viewer for different events",
      "description": "Fix event click handling in EventsDebugPage tests. Clicking event items should trigger mockTabsSendMessage but currently doesn't. May need to adjust click simulation, add waitFor(), or fix mock setup.",
      "estimatedMinutes": 25,
      "checklistItems": [
        "Read src/components/__tests__/EventsDebugPage.test.tsx lines 400-420 to understand test structure",
        "Find where event item click is simulated",
        "Find where mockTabsSendMessage is set up and what it expects",
        "Issue could be: (1) Click not reaching element, (2) Event handler async and test doesn't wait, (3) Mock not properly attached, (4) Different element structure than test expects",
        "Try: Add waitFor(() => expect(mockTabsSendMessage).toHaveBeenCalledWith(...)) around assertion",
        "Or: Use userEvent.click() instead of fireEvent.click() or element.click()",
        "Or: Verify mock is set up before component renders",
        "Run: npm run test:unit -- EventsDebugPage.test.tsx",
        "Verify all 3 event tests pass",
        "Commit: 'fix: correct event click handler and mock setup in EventsDebugPage tests'"
      ],
      "expectedOutcome": "Event click handlers trigger message sending. Three failing tests will pass.",
      "reportingRequirements": "Document: (1) Root cause of click not triggering, (2) How fix was implemented, (3) Test results, (4) Git status"
    },
    {
      "id": "unit-fix-verify-2",
      "wave": "Wave 2 - Fix Logic Issues",
      "file": "src/sdk-bridge/__tests__/experiment/code-executor.test.ts",
      "priority": "P1",
      "type": "Security Feature Implementation",
      "status": "pending",
      "assignedTo": "Agent-5",
      "knownIssue": "CodeExecutor.execute() test expects false when eval() is called (line 135), but currently returns true. Test: 'should prevent direct access to eval'",
      "description": "Fix eval() prevention in CodeExecutor. Either implement eval prevention mechanism or document why it's not possible and skip the test appropriately.",
      "estimatedMinutes": 30,
      "rootCauseAnalysis": "CodeExecutor uses Function constructor to execute code. Within Function context, eval() can still be called. May not be possible to prevent eval in this context without significant changes.",
      "fixStrategy": "OPTION A: Implement eval prevention - Add validation/restriction code to CodeExecutor.execute() that detects and blocks eval calls OPTION B: Accept eval can't be prevented - Test if eval prevention is actually feasible in Function context. If not, document as architectural limitation and either: (1) skip test with documentation, (2) test different behavior, (3) accept test failure with clear comment",
      "checklist": [
        "Read src/sdk-bridge/experiment/code-executor.ts execute() method",
        "Research: Can eval be prevented within a Function-constructed context?",
        "If yes: implement prevention (may involve string scanning or other techniques)",
        "If no: Document this as architectural limitation",
        "Run: npm run test:unit -- code-executor.test.ts",
        "Verify test passes OR is appropriately skipped/documented",
        "Commit with clear message about decision made"
      ],
      "expectedOutcome": "Either eval prevention works (test passes) OR test is properly skipped with documentation of why it's not feasible",
      "reportingRequirements": "Document: (1) Whether eval prevention is possible, (2) Implementation approach or limitation explanation, (3) Test result, (4) Git status"
    },
    {
      "id": "unit-fix-verify-3",
      "wave": "Wave 2 - Fix Logic Issues",
      "file": "Extension manifest validation test (likely tests/__tests__/manifest.test.ts or similar)",
      "priority": "P2",
      "type": "Test Configuration Fix",
      "status": "pending",
      "assignedTo": "Agent-6",
      "knownIssue": "Manifest test 'should use HTTPS for all host permissions' fails because manifest includes http://localhost/* for local development, but test expects all permissions to be https://",
      "description": "Fix manifest HTTPS validation test. Add exception for localhost:* permission since it's needed for local development and doesn't apply to production security constraints.",
      "estimatedMinutes": 15,
      "rootCauseAnalysis": "Test at line 134 checks that all host_permissions match /^https:\\/\\// but development manifest includes http://localhost/* for testing. Need to allow localhost exception.",
      "fixStrategy": "Find manifest test file (likely in tests/ directory). Locate the HTTPS check around line 134. Add condition to skip HTTPS check for http://localhost/* permission while still requiring HTTPS for all other permissions.",
      "checklist": [
        "Find manifest validation test file (search for 'should use HTTPS for all host permissions')",
        "Read test around line 134 to see assertion",
        "Modify test to add exception: if (permission !== 'http://localhost/*') { expect(permission).toMatch(/^https:\\/\\/) }",
        "Or use filter: manifest.host_permissions.filter(p => p !== 'http://localhost/*').forEach(p => expect(p).toMatch(...))",
        "Run: npm run test:unit -- manifest.test.ts (or appropriate test file)",
        "Verify test passes",
        "Commit: 'fix: allow localhost exception in manifest HTTPS security test'"
      ],
      "expectedOutcome": "Manifest test passes. Localhost permission allowed for development while other permissions still require HTTPS.",
      "reportingRequirements": "Document: (1) Manifest test file location, (2) Fix implemented, (3) Test result, (4) Git status"
    },
    {
      "id": "unit-fix-verify-4",
      "wave": "Wave 2 - Full Verification",
      "file": "All unit test files",
      "priority": "P0",
      "type": "Full Test Suite Verification",
      "status": "pending",
      "assignedTo": "Agent-7",
      "knownIssue": "7 tests failing. After other agents fix issues, full verification needed to confirm all tests pass.",
      "description": "Run complete unit test suite to verify all 7 failing tests have been fixed and no new failures introduced. Compare results with pre-fix metrics.",
      "estimatedMinutes": 15,
      "checklist": [
        "Wait for Agents 1-6 to complete their fixes and report",
        "Build extension: npm run build:dev (if needed)",
        "Run full unit test suite: npm run test:unit 2>&1",
        "Capture complete output with: npm run test:unit 2>&1 | tee test-results-after-unit-fix.txt",
        "Parse results: extract total tests, passed, failed, skipped",
        "Compare with baseline: Before: 1312 passed, 7 failed, 1319 total → After: Should be 1319 passed, 0 failed",
        "If any tests still failing: identify which ones and report back for additional fixes",
        "Check git status - should be clean after all commits",
        "Create summary report of test health"
      ],
      "expectedOutcome": "All 1319 unit tests passing. 0 failures. Full green test suite.",
      "reportingRequirements": "Document: (1) Full test command output, (2) Summary statistics (total/passed/failed/skipped), (3) Compare before/after numbers, (4) Any remaining issues, (5) Git status, (6) Overall unit test suite health assessment"
    }
  ]
}

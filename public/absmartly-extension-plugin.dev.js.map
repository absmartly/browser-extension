{
  "version": 3,
  "sources": ["../src/plugin-extensions/browser-bundle.ts", "../src/plugin-extensions/StateManager.ts", "../src/plugin-extensions/MessageBridge.ts", "../src/plugin-extensions/CodeInjector.ts", "../src/plugin-extensions/ExtensionDOMPlugin.ts"],
  "sourcesContent": ["/**\n * Browser Bundle Entry Point\n * This file is bundled for injection into the page context\n * It exposes the ExtensionDOMPlugin and its dependencies globally\n */\n\n/// <reference lib=\"dom\" />\n\nimport { ExtensionDOMPlugin } from './ExtensionDOMPlugin'\nimport { StateManager } from './StateManager'\nimport { MessageBridge } from './MessageBridge'\nimport { CodeInjector } from './CodeInjector'\n\n// Expose on window for browser context\ndeclare global {\n  interface Window {\n    ABsmartlyExtensionPlugin?: {\n      ExtensionDOMPlugin: typeof ExtensionDOMPlugin\n      StateManager: typeof StateManager\n      MessageBridge: typeof MessageBridge\n      CodeInjector: typeof CodeInjector\n      version: string\n    }\n  }\n}\n\n// Export as global for browser use\nif (typeof window !== 'undefined') {\n  window.ABsmartlyExtensionPlugin = {\n    ExtensionDOMPlugin,\n    StateManager,\n    MessageBridge,\n    CodeInjector,\n    version: '1.0.0'\n  }\n}\n\n// Also export for module use\nexport { ExtensionDOMPlugin, StateManager, MessageBridge, CodeInjector }\n", "/**\n * StateManager\n * Tracks original DOM element states before modifications\n * Enables reversion of changes applied by the plugin\n */\n\nexport interface ElementState {\n  textContent?: string\n  innerHTML?: string\n  attributes?: Record<string, string | null>\n  styles?: Record<string, string>\n  classList?: string[]\n}\n\nexport interface AppliedChange {\n  experimentName: string\n  selector: string\n  type: string\n  element: Element\n  originalState: ElementState\n  appliedAt: number\n}\n\nexport class StateManager {\n  private stateMap: Map<Element, Map<string, ElementState>> = new Map()\n  private appliedChanges: Map<string, AppliedChange[]> = new Map()\n  private debug: boolean\n\n  constructor(debug = false) {\n    this.debug = debug\n  }\n\n  /**\n   * Store the original state of an element before modification\n   */\n  storeState(element: Element, experimentName: string): ElementState {\n    if (!this.stateMap.has(element)) {\n      this.stateMap.set(element, new Map())\n    }\n\n    const elementStates = this.stateMap.get(element)!\n\n    if (!elementStates.has(experimentName)) {\n      const state: ElementState = {\n        textContent: element.textContent || undefined,\n        innerHTML: (element as HTMLElement).innerHTML || undefined,\n        attributes: this.captureAttributes(element),\n        styles: this.captureStyles(element as HTMLElement),\n        classList: Array.from(element.classList)\n      }\n\n      elementStates.set(experimentName, state)\n\n      if (this.debug) {\n        console.log(`[StateManager] Stored state for ${experimentName}:`, state)\n      }\n    }\n\n    return elementStates.get(experimentName)!\n  }\n\n  /**\n   * Track an applied change\n   */\n  trackChange(change: Omit<AppliedChange, 'appliedAt'>): void {\n    const { experimentName } = change\n\n    if (!this.appliedChanges.has(experimentName)) {\n      this.appliedChanges.set(experimentName, [])\n    }\n\n    const appliedChange: AppliedChange = {\n      ...change,\n      appliedAt: Date.now()\n    }\n\n    this.appliedChanges.get(experimentName)!.push(appliedChange)\n\n    if (this.debug) {\n      console.log(`[StateManager] Tracked change for ${experimentName}:`, appliedChange)\n    }\n  }\n\n  /**\n   * Get original state for an element\n   */\n  getState(element: Element, experimentName: string): ElementState | null {\n    return this.stateMap.get(element)?.get(experimentName) || null\n  }\n\n  /**\n   * Get all applied changes for an experiment\n   */\n  getAppliedChanges(experimentName: string): AppliedChange[] {\n    return this.appliedChanges.get(experimentName) || []\n  }\n\n  /**\n   * Revert an element to its original state\n   */\n  revertElement(element: Element, experimentName: string): boolean {\n    const state = this.getState(element, experimentName)\n\n    if (!state) {\n      if (this.debug) {\n        console.warn(`[StateManager] No state found for element in ${experimentName}`)\n      }\n      return false\n    }\n\n    try {\n      // Revert text content\n      if (state.textContent !== undefined) {\n        element.textContent = state.textContent\n      }\n\n      // Revert innerHTML\n      if (state.innerHTML !== undefined) {\n        (element as HTMLElement).innerHTML = state.innerHTML\n      }\n\n      // Revert attributes\n      if (state.attributes) {\n        Object.entries(state.attributes).forEach(([attr, value]) => {\n          if (value === null) {\n            element.removeAttribute(attr)\n          } else {\n            element.setAttribute(attr, value)\n          }\n        })\n      }\n\n      // Revert styles\n      if (state.styles) {\n        const htmlElement = element as HTMLElement\n        Object.entries(state.styles).forEach(([prop, value]) => {\n          htmlElement.style[prop as any] = value\n        })\n      }\n\n      // Revert class list\n      if (state.classList) {\n        element.className = state.classList.join(' ')\n      }\n\n      // Remove tracking attributes\n      element.removeAttribute('data-absmartly-experiment')\n      element.removeAttribute('data-absmartly-modified')\n      element.removeAttribute('data-absmartly-original')\n\n      if (this.debug) {\n        console.log(`[StateManager] Reverted element for ${experimentName}`)\n      }\n\n      return true\n    } catch (error) {\n      console.error(`[StateManager] Error reverting element:`, error)\n      return false\n    }\n  }\n\n  /**\n   * Remove all tracked changes for an experiment\n   */\n  removeExperiment(experimentName: string): boolean {\n    const changes = this.getAppliedChanges(experimentName)\n\n    if (changes.length === 0) {\n      return false\n    }\n\n    let success = true\n    for (const change of changes) {\n      if (!this.revertElement(change.element, experimentName)) {\n        success = false\n      }\n    }\n\n    // Clean up tracking\n    this.appliedChanges.delete(experimentName)\n\n    // Clean up state map entries for this experiment\n    this.stateMap.forEach((elementStates) => {\n      elementStates.delete(experimentName)\n    })\n\n    if (this.debug) {\n      console.log(`[StateManager] Removed experiment ${experimentName}, success: ${success}`)\n    }\n\n    return success\n  }\n\n  /**\n   * Clear all tracked state\n   */\n  clear(): void {\n    this.stateMap.clear()\n    this.appliedChanges.clear()\n  }\n\n  private captureAttributes(element: Element): Record<string, string | null> {\n    const attrs: Record<string, string | null> = {}\n\n    for (const attr of Array.from(element.attributes)) {\n      attrs[attr.name] = attr.value\n    }\n\n    return attrs\n  }\n\n  private captureStyles(element: HTMLElement): Record<string, string> {\n    const styles: Record<string, string> = {}\n    const computedStyle = window.getComputedStyle(element)\n\n    // Only capture inline styles, not computed styles\n    if (element.style.length > 0) {\n      for (let i = 0; i < element.style.length; i++) {\n        const prop = element.style[i]\n        styles[prop] = element.style.getPropertyValue(prop)\n      }\n    }\n\n    return styles\n  }\n}\n", "/**\n * MessageBridge\n * Handles communication between the plugin and the browser extension\n * Uses window.postMessage for cross-context communication\n */\n\nexport interface ExtensionMessage {\n  source: string\n  type: string\n  payload?: any\n}\n\nexport type MessageHandler = (payload: any) => void\n\nexport class MessageBridge {\n  private handlers: Map<string, MessageHandler[]> = new Map()\n  private debug: boolean\n  private listenerAttached = false\n\n  constructor(debug = false) {\n    this.debug = debug\n    this.setupListener()\n  }\n\n  /**\n   * Send a message to the extension\n   */\n  send(type: string, payload?: any): void {\n    const message: ExtensionMessage = {\n      source: 'absmartly-page',\n      type,\n      payload\n    }\n\n    if (this.debug) {\n      console.log('[MessageBridge] Sending message:', message)\n    }\n\n    window.postMessage(message, '*')\n  }\n\n  /**\n   * Register a handler for incoming messages\n   */\n  on(type: string, handler: MessageHandler): void {\n    if (!this.handlers.has(type)) {\n      this.handlers.set(type, [])\n    }\n\n    this.handlers.get(type)!.push(handler)\n\n    if (this.debug) {\n      console.log(`[MessageBridge] Registered handler for: ${type}`)\n    }\n  }\n\n  /**\n   * Unregister a handler\n   */\n  off(type: string, handler: MessageHandler): void {\n    const handlers = this.handlers.get(type)\n\n    if (handlers) {\n      const index = handlers.indexOf(handler)\n      if (index > -1) {\n        handlers.splice(index, 1)\n      }\n    }\n  }\n\n  /**\n   * Unregister all handlers for a message type\n   */\n  removeAllHandlers(type: string): void {\n    this.handlers.delete(type)\n  }\n\n  /**\n   * Setup the window message listener\n   */\n  private setupListener(): void {\n    if (this.listenerAttached) {\n      return\n    }\n\n    window.addEventListener('message', (event: MessageEvent) => {\n      if (!event.data || event.data.source !== 'absmartly-extension') {\n        return\n      }\n\n      const message = event.data as ExtensionMessage\n\n      if (this.debug) {\n        console.log('[MessageBridge] Received message:', message)\n      }\n\n      this.handleMessage(message)\n    })\n\n    this.listenerAttached = true\n\n    if (this.debug) {\n      console.log('[MessageBridge] Message listener attached')\n    }\n  }\n\n  /**\n   * Handle incoming messages\n   */\n  private handleMessage(message: ExtensionMessage): void {\n    const handlers = this.handlers.get(message.type)\n\n    if (!handlers || handlers.length === 0) {\n      if (this.debug) {\n        console.log(`[MessageBridge] No handlers for message type: ${message.type}`)\n      }\n      return\n    }\n\n    handlers.forEach((handler) => {\n      try {\n        handler(message.payload)\n      } catch (error) {\n        console.error(`[MessageBridge] Error in handler for ${message.type}:`, error)\n      }\n    })\n  }\n\n  /**\n   * Notify extension that plugin is ready\n   */\n  notifyReady(version: string, capabilities: string[]): void {\n    this.send('PLUGIN_INITIALIZED', {\n      version,\n      capabilities\n    })\n  }\n\n  /**\n   * Request custom code from extension\n   */\n  requestCustomCode(): void {\n    this.send('REQUEST_CUSTOM_CODE')\n  }\n\n  /**\n   * Notify extension about experiment trigger\n   */\n  notifyExperimentTriggered(experimentName: string, variant: number): void {\n    this.send('EXPERIMENT_TRIGGERED', {\n      experimentName,\n      variant\n    })\n  }\n\n  /**\n   * Clean up\n   */\n  destroy(): void {\n    this.handlers.clear()\n    // Note: We don't remove the event listener as it might be shared\n  }\n}\n", "/**\n * CodeInjector\n * Handles dynamic injection of scripts and styles into the page\n */\n\nexport interface InjectionCode {\n  headStart?: string\n  headEnd?: string\n  bodyStart?: string\n  bodyEnd?: string\n}\n\nexport type InjectionLocation = 'headStart' | 'headEnd' | 'bodyStart' | 'bodyEnd'\n\nexport class CodeInjector {\n  private debug: boolean\n  private injectedElements: Set<Element> = new Set()\n\n  constructor(debug = false) {\n    this.debug = debug\n  }\n\n  /**\n   * Inject custom code at specified locations\n   */\n  injectCode(code: InjectionCode): void {\n    if (this.debug) {\n      console.log('[CodeInjector] Injecting custom code:', code)\n    }\n\n    if (code.headStart) {\n      this.injectAtLocation(code.headStart, 'headStart')\n    }\n\n    if (code.headEnd) {\n      this.injectAtLocation(code.headEnd, 'headEnd')\n    }\n\n    if (code.bodyStart) {\n      this.injectAtLocation(code.bodyStart, 'bodyStart')\n    }\n\n    if (code.bodyEnd) {\n      this.injectAtLocation(code.bodyEnd, 'bodyEnd')\n    }\n  }\n\n  /**\n   * Inject HTML content at a specific location\n   */\n  private injectAtLocation(html: string, location: InjectionLocation): void {\n    if (!html) {\n      return\n    }\n\n    if (this.debug) {\n      console.log(`[CodeInjector] Injecting at ${location}:`, html.substring(0, 100))\n    }\n\n    const container = document.createElement('div')\n    container.innerHTML = html\n    container.setAttribute('data-absmartly-injected', location)\n\n    // Process and inject each child element\n    const children = Array.from(container.children)\n\n    children.forEach((child) => {\n      this.injectElement(child, location)\n    })\n\n    // Also execute any scripts found in the HTML\n    this.executeScriptsInHTML(html, location)\n  }\n\n  /**\n   * Inject a single element at the specified location\n   */\n  private injectElement(element: Element, location: InjectionLocation): void {\n    element.setAttribute('data-absmartly-injected', location)\n\n    const targetLocation = this.getTargetLocation(location)\n\n    if (targetLocation) {\n      targetLocation.appendChild(element)\n      this.injectedElements.add(element)\n\n      if (this.debug) {\n        console.log(`[CodeInjector] Injected element at ${location}:`, element)\n      }\n    }\n  }\n\n  /**\n   * Get the DOM location for injection\n   */\n  private getTargetLocation(location: InjectionLocation): Element | null {\n    switch (location) {\n      case 'headStart':\n        return document.head.firstChild ? document.head : null\n      case 'headEnd':\n        return document.head\n      case 'bodyStart':\n        return document.body.firstChild ? document.body : null\n      case 'bodyEnd':\n        return document.body\n      default:\n        return null\n    }\n  }\n\n  /**\n   * Execute script tags found in HTML content\n   * Scripts injected via innerHTML don't execute automatically\n   */\n  private executeScriptsInHTML(html: string, location: InjectionLocation): void {\n    const temp = document.createElement('div')\n    temp.innerHTML = html\n\n    const scripts = temp.querySelectorAll('script')\n\n    scripts.forEach((script) => {\n      try {\n        if (script.src) {\n          // External script\n          const newScript = document.createElement('script')\n          newScript.src = script.src\n          newScript.async = script.async\n          newScript.defer = script.defer\n          newScript.setAttribute('data-absmartly-injected', location)\n\n          this.insertAtLocation(newScript, location)\n          this.injectedElements.add(newScript)\n        } else {\n          // Inline script\n          const code = script.textContent || script.innerText || ''\n          if (code) {\n            const fn = new Function(code)\n            fn()\n\n            if (this.debug) {\n              console.log(`[CodeInjector] Executed inline script from ${location}`)\n            }\n          }\n        }\n      } catch (error) {\n        console.error(`[CodeInjector] Failed to execute script from ${location}:`, error)\n      }\n    })\n  }\n\n  /**\n   * Insert element at the correct position based on injection point\n   */\n  private insertAtLocation(element: Element, location: InjectionLocation): void {\n    switch (location) {\n      case 'headStart':\n        if (document.head.firstChild) {\n          document.head.insertBefore(element, document.head.firstChild)\n        } else {\n          document.head.appendChild(element)\n        }\n        break\n      case 'headEnd':\n        document.head.appendChild(element)\n        break\n      case 'bodyStart':\n        if (document.body.firstChild) {\n          document.body.insertBefore(element, document.body.firstChild)\n        } else {\n          document.body.appendChild(element)\n        }\n        break\n      case 'bodyEnd':\n        document.body.appendChild(element)\n        break\n    }\n  }\n\n  /**\n   * Inject a style element with CSS\n   */\n  injectStyle(css: string, id?: string): void {\n    const style = document.createElement('style')\n\n    if (id) {\n      style.id = id\n    }\n\n    style.setAttribute('data-absmartly-injected', 'style')\n    style.textContent = css\n\n    document.head.appendChild(style)\n    this.injectedElements.add(style)\n\n    if (this.debug) {\n      console.log('[CodeInjector] Injected style:', css.substring(0, 100))\n    }\n  }\n\n  /**\n   * Inject a script element\n   */\n  injectScript(src: string, id?: string): void {\n    const script = document.createElement('script')\n\n    if (id) {\n      script.id = id\n    }\n\n    script.src = src\n    script.setAttribute('data-absmartly-injected', 'script')\n\n    document.head.appendChild(script)\n    this.injectedElements.add(script)\n\n    if (this.debug) {\n      console.log('[CodeInjector] Injected script:', src)\n    }\n  }\n\n  /**\n   * Remove all injected elements\n   */\n  removeAll(): void {\n    this.injectedElements.forEach((element) => {\n      try {\n        element.parentNode?.removeChild(element)\n      } catch (error) {\n        console.error('[CodeInjector] Failed to remove injected element:', error)\n      }\n    })\n\n    this.injectedElements.clear()\n\n    if (this.debug) {\n      console.log('[CodeInjector] Removed all injected elements')\n    }\n  }\n\n  /**\n   * Get all injected elements\n   */\n  getInjectedElements(): Element[] {\n    return Array.from(this.injectedElements)\n  }\n}\n", "/**\n * ExtensionDOMPlugin\n * Wraps DOMChangesPluginLite with extension-specific functionality\n * - State management for change reversion\n * - Message bridge for extension communication\n * - Code injection capabilities\n */\n\nimport { StateManager } from './StateManager'\nimport { MessageBridge } from './MessageBridge'\nimport { CodeInjector, InjectionCode } from './CodeInjector'\n\nexport interface PluginConfig {\n  context: any\n  autoApply?: boolean\n  spa?: boolean\n  visibilityTracking?: boolean\n  dataSource?: 'variable' | 'customData'\n  dataFieldName?: string\n  debug?: boolean\n}\n\nexport interface DOMChange {\n  selector: string\n  type: string\n  value?: any\n  styles?: Record<string, string>\n  className?: string\n  attribute?: string\n  enabled?: boolean\n}\n\n/**\n * ExtensionDOMPlugin\n * Extends DOMChangesPluginLite with browser extension features\n */\nexport class ExtensionDOMPlugin {\n  private basePlugin: any // Will be DOMChangesPluginLite\n  private stateManager: StateManager\n  private messageBridge: MessageBridge\n  private codeInjector: CodeInjector\n  private config: Required<PluginConfig>\n  private initialized = false\n\n  constructor(basePlugin: any, config: PluginConfig) {\n    this.basePlugin = basePlugin\n    this.config = {\n      context: config.context,\n      autoApply: config.autoApply ?? true,\n      spa: config.spa ?? true,\n      visibilityTracking: config.visibilityTracking ?? true,\n      dataSource: config.dataSource ?? 'variable',\n      dataFieldName: config.dataFieldName ?? '__dom_changes',\n      debug: config.debug ?? false\n    }\n\n    this.stateManager = new StateManager(this.config.debug)\n    this.messageBridge = new MessageBridge(this.config.debug)\n    this.codeInjector = new CodeInjector(this.config.debug)\n\n    this.setupMessageHandlers()\n  }\n\n  /**\n   * Initialize the plugin\n   */\n  async initialize(): Promise<void> {\n    if (this.initialized) {\n      return\n    }\n\n    // Initialize base plugin\n    if (this.basePlugin.initialize) {\n      await this.basePlugin.initialize()\n    }\n\n    // Listen to base plugin events\n    if (this.basePlugin.on) {\n      this.basePlugin.on('change-applied', (data: any) => {\n        this.handleChangeApplied(data)\n      })\n\n      this.basePlugin.on('experiment-triggered', (data: any) => {\n        this.messageBridge.notifyExperimentTriggered(\n          data.experimentName,\n          data.variant\n        )\n      })\n    }\n\n    // Notify extension that plugin is ready\n    this.messageBridge.notifyReady('1.0.0', [\n      'state-management',\n      'change-reversion',\n      'code-injection',\n      'preview-changes'\n    ])\n\n    // Register with context (MUST be after base plugin initialization)\n    // This ensures we override any registration from the base plugin\n    if (this.config.context) {\n      this.config.context.__domPlugin = {\n        instance: this,\n        initialized: true,\n        version: '1.0.0',\n        capabilities: ['state-management', 'change-reversion'],\n        timestamp: Date.now()\n      }\n\n      // Also store globally for easier access\n      if (typeof window !== 'undefined') {\n        ;(window as any).__absmartlyPlugin = this\n        ;(window as any).__absmartlyDOMChangesPlugin = this\n      }\n    }\n\n    this.initialized = true\n\n    if (this.config.debug) {\n      console.log('[ExtensionDOMPlugin] Initialized successfully')\n      console.log('[ExtensionDOMPlugin] Available methods:', Object.getOwnPropertyNames(Object.getPrototypeOf(this)).filter(name => typeof (this as any)[name] === 'function'))\n      console.log('[ExtensionDOMPlugin] removeChanges is function:', typeof this.removeChanges === 'function')\n    }\n  }\n\n  /**\n   * Apply a single DOM change with state tracking\n   */\n  applyChange(change: DOMChange, experimentName: string = '__preview__'): boolean {\n    if (!change.selector || !change.type) {\n      return false\n    }\n\n    // Skip disabled changes\n    if (change.enabled === false) {\n      return false\n    }\n\n    const elements = document.querySelectorAll(change.selector)\n\n    if (elements.length === 0) {\n      if (this.config.debug) {\n        console.warn(`[ExtensionDOMPlugin] No elements found for: ${change.selector}`)\n      }\n      return false\n    }\n\n    let success = true\n\n    elements.forEach((element) => {\n      try {\n        // Store original state before modification\n        const originalState = this.stateManager.storeState(element, experimentName)\n\n        // Apply the change manually (we handle all preview changes ourselves)\n        // The base plugin (Lite) only handles automatic application from context\n        this.applyChangeManually(element as HTMLElement, change, experimentName)\n\n        // Track the applied change\n        this.stateManager.trackChange({\n          experimentName,\n          selector: change.selector,\n          type: change.type,\n          element,\n          originalState\n        })\n\n        if (this.config.debug) {\n          console.log(`[ExtensionDOMPlugin] Applied ${change.type} change to element:`, {\n            selector: change.selector,\n            experimentName,\n            element\n          })\n        }\n      } catch (error) {\n        console.error('[ExtensionDOMPlugin] Error applying change:', error)\n        success = false\n      }\n    })\n\n    return success\n  }\n\n  /**\n   * Remove all changes for an experiment\n   */\n  removeChanges(experimentName: string): boolean {\n    if (this.config.debug) {\n      console.log(`[ExtensionDOMPlugin] Removing changes for: ${experimentName}`)\n    }\n\n    return this.stateManager.removeExperiment(experimentName)\n  }\n\n  /**\n   * Revert a specific change\n   */\n  revertChange(element: Element, experimentName: string): boolean {\n    return this.stateManager.revertElement(element, experimentName)\n  }\n\n  /**\n   * Get original state of an element\n   */\n  getOriginalState(element: Element, experimentName: string): any {\n    return this.stateManager.getState(element, experimentName)\n  }\n\n  /**\n   * Get all applied changes for an experiment\n   */\n  getAppliedChanges(experimentName: string): any[] {\n    return this.stateManager.getAppliedChanges(experimentName)\n  }\n\n  /**\n   * Inject custom code\n   */\n  injectCode(code: InjectionCode): void {\n    this.codeInjector.injectCode(code)\n  }\n\n  /**\n   * Listen for base plugin events\n   */\n  on(event: string, handler: (data: any) => void): void {\n    if (this.basePlugin.on) {\n      this.basePlugin.on(event, handler)\n    }\n  }\n\n  /**\n   * Get the base plugin instance\n   */\n  getBasePlugin(): any {\n    return this.basePlugin\n  }\n\n  /**\n   * Setup message handlers for extension communication\n   */\n  private setupMessageHandlers(): void {\n    // Handle preview changes from extension\n    this.messageBridge.on('PREVIEW_CHANGES', (payload) => {\n      const { changes, experimentName, updateMode } = payload || {}\n      const expName = experimentName || '__preview__'\n\n      if (this.config.debug) {\n        console.log(`[ExtensionDOMPlugin] Applying preview for: ${expName}`)\n      }\n\n      // Remove existing changes first\n      this.removeChanges(expName)\n\n      // Apply new changes\n      if (changes && Array.isArray(changes)) {\n        changes.forEach((change: DOMChange) => {\n          this.applyChange(change, expName)\n        })\n      }\n    })\n\n    // Handle remove preview\n    this.messageBridge.on('REMOVE_PREVIEW', (payload) => {\n      const { experimentName } = payload || {}\n      const expName = experimentName || '__preview__'\n\n      if (this.config.debug) {\n        console.log(`[ExtensionDOMPlugin] Removing preview: ${expName}`)\n      }\n\n      this.removeChanges(expName)\n    })\n\n    // Handle custom code injection\n    this.messageBridge.on('INJECT_CUSTOM_CODE', (payload) => {\n      if (payload && payload.code) {\n        this.injectCode(payload.code)\n      }\n    })\n  }\n\n  /**\n   * Handle change applied event from base plugin\n   */\n  private handleChangeApplied(data: any): void {\n    const { experimentName, change, element } = data\n\n    if (element && experimentName) {\n      const originalState = this.stateManager.storeState(element, experimentName)\n\n      this.stateManager.trackChange({\n        experimentName,\n        selector: change.selector,\n        type: change.type,\n        element,\n        originalState\n      })\n    }\n  }\n\n  /**\n   * Fallback manual change application\n   */\n  private applyChangeManually(\n    element: HTMLElement,\n    change: DOMChange,\n    experimentName: string\n  ): void {\n    // Mark element with experiment\n    element.setAttribute('data-absmartly-experiment', experimentName)\n    element.setAttribute('data-absmartly-modified', 'true')\n\n    switch (change.type) {\n      case 'text':\n        element.textContent = change.value\n        break\n\n      case 'html':\n        element.innerHTML = change.value\n        break\n\n      case 'style':\n      case 'styles':\n        const styles = change.styles || change.value\n        if (typeof styles === 'object') {\n          Object.entries(styles).forEach(([prop, value]) => {\n            element.style[prop as any] = value as string\n          })\n        } else if (typeof styles === 'string') {\n          element.setAttribute('style', styles)\n        }\n        break\n\n      case 'class':\n        if (change.className) {\n          element.classList.add(change.className)\n        }\n        break\n\n      case 'attribute':\n        if (change.attribute && change.value !== undefined) {\n          element.setAttribute(change.attribute, change.value)\n        }\n        break\n    }\n  }\n\n  /**\n   * Clean up\n   */\n  destroy(): void {\n    this.stateManager.clear()\n    this.messageBridge.destroy()\n    this.codeInjector.removeAll()\n\n    if (this.basePlugin.destroy) {\n      this.basePlugin.destroy()\n    }\n\n    // Remove from context\n    if (this.config.context?.__domPlugin) {\n      delete this.config.context.__domPlugin\n    }\n\n    this.initialized = false\n  }\n}\n"],
  "mappings": "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",
  "names": []
}

"use strict";

require("core-js/modules/es.array.slice.js");
require("core-js/modules/es.array.from.js");
require("core-js/modules/es.regexp.exec.js");
require("core-js/modules/es.array.iterator.js");
require("core-js/modules/es.array.splice.js");
require("core-js/modules/es.symbol.description.js");
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AbortController = exports.AbortSignal = void 0;
class AbortSignal {
  constructor() {
    this.aborted = false;
    this._events = {};
  }
  addEventListener(type, listener) {
    let listeners = this._events[type];
    if (!listeners) {
      listeners = [];
      this._events[type] = listeners;
    }
    listeners.push(listener);
  }
  removeEventListener(type, listener) {
    const listeners = this._events[type];
    if (listeners) {
      const index = listeners.findIndex(x => x === listener);
      if (index !== -1) {
        listeners.splice(index, 1);
        if (listeners.length === 0) {
          delete this._events[type];
        }
      }
    }
  }
  dispatchEvent(evt) {
    this[`on${evt.type}`] && this[`on${evt.type}`](evt);
    const listeners = this._events[evt.type];
    if (listeners) {
      var _iterator = _createForOfIteratorHelper(listeners),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          const listener = _step.value;
          listener.call(null, evt);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
  }
  toString() {
    return "[object AbortSignal]";
  }
}
exports.AbortSignal = AbortSignal;
class AbortController {
  constructor() {
    this.signal = new AbortSignal();
  }
  abort() {
    let evt;
    try {
      evt = new Event("abort");
    } catch (e) {
      evt = {
        type: "abort",
        bubbles: false,
        cancelable: false
      };
    }
    this.signal.aborted = true;
    this.signal.dispatchEvent(evt);
  }
  toString() {
    return "[object AbortController]";
  }
}
exports.AbortController = AbortController;
if (typeof Symbol !== "undefined" && Symbol.toStringTag !== undefined) {
  Object.defineProperty(AbortSignal.prototype, Symbol.toStringTag, {
    configurable: true,
    value: "AbortSignal"
  });
  Object.defineProperty(AbortController.prototype, Symbol.toStringTag, {
    configurable: true,
    value: "AbortController"
  });
}
exports.default = AbortController;
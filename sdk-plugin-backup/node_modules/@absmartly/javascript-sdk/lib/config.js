"use strict";

require("core-js/modules/es.symbol.description.js");
require("core-js/modules/es.array.iterator.js");
require("core-js/modules/es.array.from.js");
require("core-js/modules/es.regexp.exec.js");
require("core-js/modules/es.object.entries.js");
require("core-js/modules/es.array.slice.js");
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
var __importDefault = void 0 && (void 0).__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mergeConfig = void 0;
const default_1 = __importDefault(require("rfdc/default"));
const utils_1 = require("./utils");
function mergeConfig(context, previousConfig) {
  const merged = (0, default_1.default)(previousConfig);
  const keys = context.variableKeys();
  for (var _i = 0, _Object$entries = Object.entries(keys); _i < _Object$entries.length; _i++) {
    const _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),
      variableKey = _Object$entries$_i[0],
      experimentName = _Object$entries$_i[1];
    let target = merged;
    const frags = variableKey.split(".");
    for (let index = 0; index < frags.length; ++index) {
      const frag = frags[index];
      if (`_${frag}_setter` in target) {
        console.error(`Config key '${frags.slice(0, index + 1).join(".")}' already set by experiment '${target[`_${frag}_setter`]}'.`);
        target = undefined;
        break;
      }
      if (frag in target) {
        if (index < frags.length - 1) {
          if (!(0, utils_1.isObject)(target[frag])) {
            console.warn(`Config key '${variableKey}' for experiment '${experimentName}' is overriding non-object value at '${frags.slice(0, index + 1).join(".")}' with an object.`);
            target = target[frag] = {};
          } else {
            target = target[frag];
          }
        }
      }
      if (index === frags.length - 1) {
        const defaultValue = target[frag];
        Object.defineProperty(target, `_${frag}_setter`, {
          value: experimentName,
          writable: false
        });
        Object.defineProperty(target, frag, {
          get: () => {
            return context.variableValue(variableKey, defaultValue);
          }
        });
      }
    }
  }
  return merged;
}
exports.mergeConfig = mergeConfig;
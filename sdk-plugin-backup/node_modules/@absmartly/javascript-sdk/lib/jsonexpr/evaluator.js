"use strict";

require("core-js/modules/es.symbol.description.js");
require("core-js/modules/es.array.iterator.js");
require("core-js/modules/es.array.slice.js");
require("core-js/modules/es.array.from.js");
require("core-js/modules/es.object.entries.js");
require("core-js/modules/es.regexp.exec.js");
require("core-js/modules/es.string.replace.js");
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Evaluator = void 0;
const utils_1 = require("../utils");
class Evaluator {
  constructor(operators, vars) {
    this.operators = operators;
    this.vars = vars;
  }
  evaluate(expr) {
    if (Array.isArray(expr)) {
      return this.operators["and"].evaluate(this, expr);
    } else if ((0, utils_1.isObject)(expr)) {
      for (var _i = 0, _Object$entries = Object.entries(expr); _i < _Object$entries.length; _i++) {
        const _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),
          key = _Object$entries$_i[0],
          value = _Object$entries$_i[1];
        const op = this.operators[key];
        if (op !== undefined) {
          return op.evaluate(this, value);
        }
        break;
      }
    }
    return null;
  }
  booleanConvert(x) {
    const type = typeof x;
    switch (type) {
      case "boolean":
        return x;
      case "number":
        return x !== 0;
      case "string":
        return x !== "false" && x !== "0" && x !== "";
      default:
        return x !== null && x !== undefined;
    }
  }
  numberConvert(x) {
    switch (typeof x) {
      case "number":
        return x;
      case "boolean":
        return x ? 1 : 0;
      case "string":
        {
          const y = parseFloat(x);
          return Number.isFinite(y) ? y : null;
        }
      default:
        return null;
    }
  }
  stringConvert(x) {
    switch (typeof x) {
      case "string":
        return x;
      case "boolean":
        return x.toString();
      case "number":
        return x.toFixed(15).replace(/\.?0{0,15}$/, "");
      default:
        return null;
    }
  }
  extractVar(path) {
    var _a;
    const frags = path.split("/");
    let target = (_a = this.vars) !== null && _a !== void 0 ? _a : {};
    for (let index = 0; index < frags.length; ++index) {
      const frag = frags[index];
      const value = target[frag];
      if (value !== undefined) {
        target = value;
        continue;
      }
      return null;
    }
    return target;
  }
  compare(lhs, rhs) {
    if (lhs === null) {
      return rhs === null ? 0 : null;
    } else if (rhs === null) {
      return null;
    }
    switch (typeof lhs) {
      case "number":
        {
          const rvalue = this.numberConvert(rhs);
          if (rvalue !== null) {
            return lhs === rvalue ? 0 : lhs > rvalue ? 1 : -1;
          }
          break;
        }
      case "string":
        {
          const rvalue = this.stringConvert(rhs);
          if (rvalue !== null) {
            return lhs === rvalue ? 0 : lhs > rvalue ? 1 : -1;
          }
          break;
        }
      case "boolean":
        {
          const rvalue = this.booleanConvert(rhs);
          if (rvalue != null) {
            return lhs === rvalue ? 0 : lhs > rvalue ? 1 : -1;
          }
          break;
        }
      default:
        {
          if ((0, utils_1.isEqualsDeep)(lhs, rhs)) {
            return 0;
          }
          break;
        }
    }
    return null;
  }
}
exports.Evaluator = Evaluator;
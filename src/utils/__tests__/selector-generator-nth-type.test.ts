/**
 * Tests for nth-of-type selector generation
 *
 * This test file focuses on verifying that :nth-of-type() is correctly added
 * to parent selectors when there are multiple siblings, which is critical for
 * generating unique selectors on sites like Framer where many elements share
 * the same data-framer-name attribute.
 *
 * Based on actual HTML structure from https://absmartly.com
 */

import { generateRobustSelector } from '../selector-generator'

describe('nth-of-type selector generation', () => {
  let container: HTMLDivElement

  beforeEach(() => {
    // Create a test DOM structure matching the actual absmartly.com Framer site
    // This matches the real HTML structure where the error occurred
    container = document.createElement('div')
    container.innerHTML = `
      <div class="framer-f0f9o7" data-framer-name="Hero section">
        <div class="framer-m59zpm" data-framer-name="Wrapper">
          <div class="framer-yvnk8j" data-framer-name="Content">
            <div>
              <div class="framer-1k0jp8o" data-framer-name="home_page_header" data-framer-component-type="RichTextContainer">
                <h1 class="framer-text framer-styles-preset-1ndl2jz" data-styles-preset="kfXGsgtib">Rapid Iteration is the Mother of Innovation</h1>
              </div>
            </div>
            <div>
              <div class="framer-1raxb8g" data-framer-name="home_page_subtitle" data-framer-component-type="RichTextContainer">
                <p class="framer-text framer-styles-preset-21ogod" data-styles-preset="xZndidUCt" data-test-target="1">Most experiments fail. Choose a platform that helps you stop faster so you can innovate faster.</p>
              </div>
            </div>
          </div>
        </div>
      </div>
      <div class="framer-abc123" data-framer-name="Features section">
        <div class="framer-xyz789" data-framer-name="Wrapper">
          <div class="framer-qwe456" data-framer-name="Content">
            <div>
              <div class="framer-3raxb8g" data-framer-name="home_page_subtitle" data-framer-component-type="RichTextContainer">
                <p class="framer-text framer-styles-preset-21ogod" data-styles-preset="xZndidUCt" data-test-target="2">Another paragraph with the same auto-generated classes.</p>
              </div>
            </div>
          </div>
        </div>
      </div>
    `
    document.body.appendChild(container)
  })

  afterEach(() => {
    document.body.removeChild(container)
  })

  test('should use semantic parent (Hero section) instead of positional selectors', () => {
    const target = document.querySelector('[data-test-target="1"]') as HTMLElement
    expect(target).toBeTruthy()

    const selector = generateRobustSelector(target, {
      preferDataAttributes: true,
      includeParentContext: true,
      maxParentLevels: 12,
      avoidAutoGenerated: true
    })

    console.log('Generated selector:', selector)

    // The selector should use semantic attributes, NOT positional selectors like div:nth-of-type(2)
    expect(selector).toContain('data-framer-name="Hero section"')
    expect(selector).not.toContain('div:nth-of-type')

    // Should be simple: semantic parent + target tag
    // Expected: div[data-framer-name="Hero section"] p
    expect(selector).toMatch(/div\[data-framer-name="Hero section"\]\s+p/)

    // Verify the selector is unique
    const matches = document.querySelectorAll(selector)
    expect(matches.length).toBe(1)
    expect(matches[0]).toBe(target)
  })

  test('should disambiguate between sections using semantic parents', () => {
    const target1 = document.querySelector('[data-test-target="1"]') as HTMLElement
    const target2 = document.querySelector('[data-test-target="2"]') as HTMLElement

    const selector1 = generateRobustSelector(target1, {
      preferDataAttributes: true,
      includeParentContext: true,
      maxParentLevels: 8,
      avoidAutoGenerated: true
    })

    const selector2 = generateRobustSelector(target2, {
      preferDataAttributes: true,
      includeParentContext: true,
      maxParentLevels: 8,
      avoidAutoGenerated: true
    })

    console.log('Selector 1:', selector1)
    console.log('Selector 2:', selector2)

    // Each selector should be unique
    expect(document.querySelectorAll(selector1).length).toBe(1)
    expect(document.querySelectorAll(selector2).length).toBe(1)

    // Each selector should match only its target
    expect(document.querySelector(selector1)).toBe(target1)
    expect(document.querySelector(selector2)).toBe(target2)

    // Selectors should use different semantic section names
    expect(selector1).toContain('Hero section')
    expect(selector2).toContain('Features section')

    // Neither should use positional selectors
    expect(selector1).not.toContain('nth-of-type')
    expect(selector2).not.toContain('nth-of-type')
  })

  test('should prefer semantic attributes over auto-generated classes', () => {
    const target = document.querySelector('[data-test-target="1"]') as HTMLElement

    const selector = generateRobustSelector(target, {
      preferDataAttributes: true,
      includeParentContext: true,
      maxParentLevels: 12,
      avoidAutoGenerated: true
    })

    console.log('Semantic selector:', selector)

    // Should NOT use auto-generated classes
    expect(selector).not.toContain('framer-1raxb8g')
    expect(selector).not.toContain('framer-styles-preset')
    expect(selector).not.toContain('xZndidUCt')

    // Should use semantic data-framer-name instead
    expect(selector).toContain('data-framer-name')

    // Verify uniqueness
    const matches = document.querySelectorAll(selector)
    expect(matches.length).toBe(1)
    expect(matches[0]).toBe(target)
  })
})

/**
 * Tests for selector-generator utility
 *
 * This file tests the isAutoGenerated function which is used to detect
 * auto-generated IDs, classes, and data attribute values that should be
 * avoided when generating CSS selectors.
 */

import { isAutoGenerated } from '../selector-generator'

describe('Auto-generated value detection', () => {
  describe('Pattern detection for Framer framework', () => {
    test('should detect FWXWbKqd8 as auto-generated', () => {
      // This is a real-world example from Framer that was not being caught
      // Pattern: F-W-X-W-b-K-q-d-8
      // - 5 uppercase: F, W, X, W, K
      // - 3 lowercase: b, q, d
      // - 1 digit at end: 8
      // - Has irregular uppercase pattern: "FWXW" followed by "b"
      // - Should match regex: /[A-Z]{2,}[a-z]/

      expect(isAutoGenerated('FWXWbKqd8')).toBe(true)
    })

    test('should detect similar Framer auto-generated patterns', () => {
      // Additional test cases with similar patterns
      const autoGeneratedValues = [
        'FWXWbKqd8',  // Original example
        'ABCDeFg1',   // Multiple uppercase followed by lowercase
        'XYZaBc2',    // Similar pattern
        'MNOPqRs3',   // Multiple uppercase in middle
      ]

      autoGeneratedValues.forEach(value => {
        expect(isAutoGenerated(value)).toBe(true)
      })
    })

    test('should NOT detect valid naming patterns as auto-generated', () => {
      // These should NOT be detected as auto-generated
      const validValues = [
        'MyButton',      // PascalCase - single uppercase at start
        'UserID',        // PascalCase - consecutive uppercase at end
        'HTMLElement',   // All uppercase acronym followed by PascalCase
        'userId123',     // camelCase with digit suffix
        'Button2',       // PascalCase with digit suffix
      ]

      validValues.forEach(value => {
        expect(isAutoGenerated(value)).toBe(false)
      })
    })
  })

  describe('Previously caught auto-generated patterns', () => {
    test('should detect various auto-generated ID patterns', () => {
      const autoGeneratedIds = [
        '123abc',         // Starts with digit
        'qm7gSEyfY',      // Mixed case with digits in middle
        'a1b2c3d4',       // Hex-like pattern
        'framer-xyz123',  // Framework prefix
        'css-1a2b3c',     // CSS modules
        'sc-aBcDeF',      // Styled components
      ]

      autoGeneratedIds.forEach(id => {
        expect(isAutoGenerated(id)).toBe(true)
      })
    })
  })
})

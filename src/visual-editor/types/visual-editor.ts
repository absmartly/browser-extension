/**
 * Type definitions for the Visual Editor
 */

// Re-export DOMChange types from the main types
import type { DOMChange, DOMChangeType } from '../../types/dom-changes'
export type { DOMChange, DOMChangeType } from '../../types/dom-changes'

// Visual Editor configuration
export interface VisualEditorConfig {
  variantName: string
  experimentName: string
  logoUrl: string
  initialChanges?: DOMChange[]
}

// Visual Editor options for initialization
export interface VisualEditorOptions {
  variantName: string
  experimentName: string
  logoUrl: string
  onChangesUpdate: (changes: DOMChange[]) => void
  initialChanges?: DOMChange[]
}

// Visual Editor state
export interface VisualEditorState {
  selectedElement: Element | null
  hoveredElement: Element | null
  changes: DOMChange[]
  undoStack: DOMChange[]
  redoStack: DOMChange[]
  originalValues: Map<string, any>
  isRearranging: boolean
  isResizing: boolean
  draggedElement: Element | null
  isActive: boolean
}

// Context menu item
export interface ContextMenuItem {
  icon: string
  label: string
  action: string
  separator?: boolean
  shortcut?: string
  enabled?: boolean
}

// Selector generation options
export interface SelectorOptions {
  preferDataAttributes?: boolean
  avoidAutoGenerated?: boolean
  includeParentContext?: boolean
  maxParentLevels?: number
}

// Edit mode types
export type EditMode = 'select' | 'rearrange' | 'resize' | 'edit' | 'inactive'

// Notification types
export type NotificationType = 'success' | 'error' | 'info' | 'warning'

// Event handler types
export interface EventHandlerCallbacks {
  onElementSelect?: (element: Element) => void
  onElementDeselect?: () => void
  onElementHover?: (element: Element) => void
  onElementUnhover?: () => void
  onContextMenu?: (x: number, y: number, element: Element) => void
  onKeyboardShortcut?: (shortcut: string, element?: Element) => void
}

// Change tracking types
export interface ChangeTrackingOptions {
  maxUndoLevels?: number
  trackOriginalValues?: boolean
  autoSave?: boolean
}

// Drag and drop types
export interface DragDropState {
  isDragging: boolean
  draggedElement: Element | null
  dropTarget: Element | null
  originalPosition: {
    parent: Element
    nextSibling: Element | null
  } | null
}

// Resize state
export interface ResizeState {
  isResizing: boolean
  resizedElement: Element | null
  originalDimensions: {
    width: string
    height: string
  } | null
  resizeHandle: 'nw' | 'ne' | 'sw' | 'se' | 'n' | 'e' | 's' | 'w' | null
}

// Visual Editor API interface
export interface VisualEditorAPI {
  start(): { success: boolean; already?: boolean }
  stop(): void
  destroy(): void
  getChanges(): DOMChange[]
  addChange(change: DOMChange): void
  undo(): void
  redo(): void
  clearChanges(): void
  saveChanges(): void
  selectElement(element: Element): void
  deselectElement(): void
  isElementSelected(element: Element): boolean
  getSelectedElement(): Element | null
  enableEditMode(mode: EditMode): void
  disableEditMode(): void
  getCurrentEditMode(): EditMode
  showNotification(message: string, type?: NotificationType): void
  hideNotification(): void
}

// Message types for communication
export interface VisualEditorMessage {
  type: 'ABSMARTLY_VISUAL_EDITOR_SAVE' | 'ABSMARTLY_VISUAL_EDITOR_EXIT' | 'ABSMARTLY_VISUAL_EDITOR_READY'
  changes?: DOMChange[]
  experimentName?: string
  variantName?: string
  payload?: any
}

// Error types
export class VisualEditorError extends Error {
  constructor(message: string, public code?: string) {
    super(message)
    this.name = 'VisualEditorError'
  }
}

// Utility types
export type ElementSelector = string
export type CSSSelector = string
export type HTMLString = string

// Element metadata
export interface ElementMetadata {
  selector: string
  tagName: string
  id?: string
  classes: string[]
  attributes: Record<string, string>
  computedStyles: Record<string, string>
  position: DOMRect
  isVisible: boolean
  isEditable: boolean
}

// Export all types and interfaces
export type {
  // Re-export state types from state manager
  VisualEditorState as StateManagerState,
  VisualEditorConfig as StateManagerConfig
}

// Default configurations
export const DEFAULT_VISUAL_EDITOR_CONFIG: Partial<VisualEditorConfig> = {
  initialChanges: []
}

export const DEFAULT_SELECTOR_OPTIONS: SelectorOptions = {
  preferDataAttributes: false,
  avoidAutoGenerated: true,
  includeParentContext: true,
  maxParentLevels: 3
}

export const DEFAULT_CHANGE_TRACKING_OPTIONS: ChangeTrackingOptions = {
  maxUndoLevels: 50,
  trackOriginalValues: true,
  autoSave: false
}